Вычисляемые поля
============================
В системе "Сфера" есть возможность динамически вычислять значение полей и выводить их в карточке Проекта.
Для этого используется вычисляемое поле.

Значения свойства ``data_type`` для вычисляемого поля - **property**

Для того чтобы добавить в проект вычисляемые поля, необходимо создать *python-класс* **SchemaMixin**. Реккомендуется создавать его в файле *shema.py* в директории ``/<ИМЯ_ПРОЕКТА>/document/``

Пример файла schema.py:

.. code-block:: python

    # импортируем необходимый инструментарий
    from werkzeug.utils import cached_property
    from datetime import date

    class SchemaMixin(object):

        @property
        def currdate(self):
            return date.today()

        @cached_property
        def field1_2(self):
            field1_2 = self.field1 + self.field2
            return field1_2

.. tip::
    Обратите внимание на декоратор **@property**, он определяет вывод функции как свойство документа. Для уменьшения нагрузки на базу данных реккомендуется использовать декоратор **@cached_property**, который переодически сохраняет результат функции вычисления поля в *оперативную память*, что позволяет значительно сократить время отклика системы.

После этого необходимо импортировать и подключить данный файл в основной класс проекта **DocumentMixin**:

.. code-block:: python

    from .shema import SchemaMixin

    class DocumentMixin(... ,SchemaMixin, ...)



Класс **SchemaMixin** обрабатывается системой каждый раз когда оператор загружает карточку Проекта. В рассматриваемом примере класс содержит две функции, возвращающих значения вычисляемых полей документа (своиств документа) -  ``currdate`` и ``field1_2``.
В первом случае функция возвращает *текущую дату* (с помощью библиотеки date) в качестве значения свойства currdate. В случае *field1_2* функция возвращает *сумму значений полей документа* ``field1`` и ``field2``. Использование декоратора **@cached_property** позволяет положить результат функции в кеш и при следующем обращении не обращаться в базу и не производить вычисления.

С помощью дополнительных библиотек и возможностей языка python вы можете писать более сложные функции.

.. note::
    Вычисляемые поля документа являются ссылкой на свойства документа, но свойства документа могут существоать без поля в документе (Для различных манипуляций с доументом)

В *"Сфера BPMS"* ест предопределенные вычислемые свойства документа, которые можно использовать в полях, в проверках или для формирования других динамических свойств.

Свойства документа, предопределенные в ядре:
_______________________________________________
* **d_create** - Дата создания документа;

* **active** - Статус активности документа (Удален или Активный). Возвращает True или False;

* **state** - Этап, на котором находится документ;

* **state_display** - Человеко-читаемое название этапа, на котором находится документ.

* **d_change** - Дата последнего изменения документа;

* **author_id** - Id автора документа;

* **author** - Автор документа

* **responsible_id** - ID Ответственного за документ в данный момент;

* **responsible** - Ответственный за документ в данный момент;

* **events** - Список этапов, на которых может находиться документ

* **last_event** -  Последнее событие по документу (определяет текущее состояние);

* **get_last_event** - Последнее событие по переходу с этапа / на этап;

* **get_first_event** - Первое событие по переходу с этапа / на этап;

* **user** - Текущий оператор;

* **roles** - Список ролей у текущего оператора (добавилено в свойства документа для работы валидаторов и удобства проверки ролей);

* **url** - Ссылка на карточку этого документа;

* **is_draft** - Документ пока еще не сохранен в БД и является черновиком;

* **is_responsible** - Проверяет, что текущий оператор отвечает за текущий документ.
