Обслуживание
====================================

Система запущена на серверном оборудовании, которое подвержено износу и поломкам, 
не зависящим от программного обеспечения, развернутого на нем.

Очень важно иметь и поддерживать в актуальном состоянии резервные копии и уметь правильно 
восстановить систему с минимальными потерями.

Окружение
------------
После того, как система развернута на ваших серверах, вам необходимо создать копию 
настроенной виртуальной машины. Вы можете оставить ее и скопировать все данные из директории, 
куда она установлена в безопасное место. Это разовая операция и подробно описывать ее не не будем.

Исходный код 
--------------
С момента запуска системы, исходный код ее менятся. Возникают доработки, в строй вводятся 
новые продукты, появляется интеграция с вашими системами. 
Исходный код системы находится под системой управления версиями GIT. 
Если систему дорабатываем мы по вашему заказу, то беспокоиться вам не о чем. 
У нас всегда есть версия репозитория, с которого можно восстановить исходный 
код на произвольный момент времени.

Если вы приняли решение дорабатывать самостоятельно или привлекаете третьих лиц, 
то на машинах разработчиков всегда найдется репозиторий. Поддерживайте репозитории 
в актуальном состоянии, и следите чтобы разрабочики забирали к себе изменения и синхронизировались.
Данный раздел не требует отдельного описания.

База данных
-------------
Есть 2 способа резервного копирования баз данных:

**Полный** когда вы делаете полную копию базы данных и сохраняете ее в виде файла 
в безопасное место. И повторяете эту процедуру время от времени. 
Очень часто это делать на больших базах данных невозможно, так как процедура снятия резервной 
копии занимает какое-то время, нагружает сервер и требует много места для хранения. 
Соответственно, при падении, восстановить с новыми данными не получится. 
Система будет восстановлена на момент создания копии.
Но при этом, это очень простой способ, не требующий особых настроек и модификации конфигурации СУБД. 
Восстановление из такой копии происходит относительно быстро.

**Инкрементный** когда вы делаете полную копию базы данных (как и в первом шаге), но все изменения, 
которые происходят после снятия копии, вы сохраняете отдельно. 
При восстановлении, необходимо восстановить данные из полной копии
и дополнительно применить к ней все изменения, которые происходили после того, 
как эта копия была создана.
Дело в том, что при работе, СУБД все изменения базы хранит в оперативном логе (xlog) 
В режиме по умолчанию, эти несколько файлов лога, которые выделены СУБД, переиспользуются по кругу.
После заполнения очередного файла, СУБД затирает самый старый и начинает писать в него и так по кругу.
Но предусмотрен режим работы с архивацией логов, когда заполненные файлы с логом можно скопировать 
в безопасное место (на другой сервер).
В этом случае, при восстановлении, можно просто шаг за шагом применить то, что делала СУБД.
То есть, отставание данных получается тем меньше, чем более интенсивное изменение данных 
(логи наполяются быстрее и уходят на архивацию).
В то время, когда сервер выполняет мало работы и файлы лога наполняются не очень интенсивно 
и рекомендуется в конфигурации задать время, 
в течении которых лог пойдет на архивацию, даже ели будет не до конца заполнен.
Операция восстановления в этом случае будет занимать больше времени, 
но зато позволит уменьшить отставание данных при восстановлении до нескольких минут.
Более подробно о этом можете прочитать в разделе :doc:`database`

Файлы пользователей
---------------------

При работе системы, пользователи загружают файлы, прикрепляют их к карточкам документов.
Все эти файлы хранятся в директории media в корне системы в директориях по ``/media/<year>/<month>/<day>/`` 
Необходимо настроить копирование этих файлов в безопасное место по расписанию.
Описание приведем чуть ниже.
Более подробно о этом можете прочитать в разделе :doc:`media`

Инструкции
---------------------

.. toctree::
   :maxdepth: 3

   database
   media


